<div class="ce_ellipse_krell" id="ce-<?= $this->id ?>">
  <?= $this->headlineHtml ?>
<!-- Formular mit Checkbox -->
  <form method="get" id="ellipse-form-<?= $this->id ?>" class="ellipse-form">
      <input type="hidden" name="ceId" value="<?= $this->id ?>">

      <div class="form-row">
          <label for="templateSelectionActive_<?= $this->id ?>">Konfiguration anzeigen</label>
          <input type="hidden" name="templateSelectionActive_<?= $this->id ?>" value="0">
          <input type="checkbox"
                 name="templateSelectionActive_<?= $this->id ?>"
                 id="templateSelectionActive_<?= $this->id ?>"
                 value="1"
                 <?= $this->templateSelectionActive ? 'checked' : '' ?>
                 onchange="document.getElementById('ellipse-form-<?= $this->id ?>').submit()">
      </div>
  </form>
    <!-- Button zum √ñffnen des Popups 
    <button type="button" onclick="document.getElementById('ellipseDialog_<?= $this->id ?>').showModal()"> Parameter bearbeiten</button>
    -->

    <!-- Popup (native HTML-Dialogbox) -->
    <dialog id="ellipseDialog_<?= $this->id ?>" class="ellipse-dialog">

        <!-- Formular zum Neuzeichnen -->
        <form method="get" id="ellipse-form-<?= $this->id ?>" class="ellipse-form">
            <div class="dialog-drag-handle">Ziehen zum Verschieben</div>
            <h3>Parameter anpassen</h3>
            
            <input type="hidden" name="ceId" value="<?= $this->id ?>">
            <input type="hidden" name="templateSelectionActive_<?= $this->id ?>" value="<?= $this->templateSelectionActive ? 1 : 0 ?>">
            <!-- Parameter -->
            <fieldset class="parameter-fieldset" id="parameter_<?= $this->id ?>">
                <legend>Parameter f√ºr Kreis auf Ellipse</legend>
                <div class="form-row"><label for="A_<?= $this->id ?>">Achse A</label>
                    <input type="number" step="any" name="A_<?= $this->id ?>" id="A_<?= $this->id ?>" value="<?= $this->A ?>">
                </div>
                <div class="form-row"><label for="B_<?= $this->id ?>">Achse B</label>
                    <input type="number" step="any" name="B_<?= $this->id ?>" id="B_<?= $this->id ?>" value="<?= $this->B ?>">
                </div>
                <div class="form-row"><label for="Umdrehungen_<?= $this->id ?>">Umdrehungen</label>
                    <input type="number" step="any" name="Umdrehungen_<?= $this->id ?>" id="Umdrehungen_<?= $this->id ?>" value="<?= $this->Umdrehungen ?>">
                </div>
                <div class="form-row"><label for="Schrittweite_<?= $this->id ?>">Schrittweite</label>
                    <input type="number" step="any" name="Schrittweite_<?= $this->id ?>" id="Schrittweite_<?= $this->id ?>" value="<?= $this->Schrittweite ?>">
                </div>
                <div class="form-row"><label for="ReihenfolgePkt_<?= $this->id ?>">Reihenfolge</label>
                    <input type="number" step="any" name="ReihenfolgePkt_<?= $this->id ?>" id="ReihenfolgePkt_<?= $this->id ?>" value="<?= $this->ReihenfolgePkt ?>">
                </div>
                <div class="form-row"><label for="Kreisradius_<?= $this->id ?>">Kreisradius</label>
                    <input type="number" step="any" name="Kreisradius_<?= $this->id ?>" id="Kreisradius_<?= $this->id ?>" value="<?= $this->Kreisradius ?>">
                </div>
                <div class="form-row"><label for="Abstand_<?= $this->id ?>">Abstand</label>
                    <input type="number" step="any" name="Abstand_<?= $this->id ?>" id="Abstand_<?= $this->id ?>" value="<?= $this->Abstand ?>">
                </div>
                <div class="form-row"><label for="lineWidth_<?= $this->id ?>">Linienst√§rke</label>
                    <input type="number" step="any" name="lineWidth_<?= $this->id ?>" id="lineWidth_<?= $this->id ?>" value="<?= $this->lineWidth ?>">
                </div>
                <div class="form-row"><label for="lineMode_<?= $this->id ?>">Linienmodus</label>
                    <select name="lineMode_<?= $this->id ?>" id="lineMode_<?= $this->id ?>" onchange="toggleCycleColors(<?= $this->id ?>)">
                        <option value="fixed" <?= $this->lineMode=="fixed" ? "selected" : "" ?>>Feste Farbe</option>
                        <option value="cycle" <?= $this->lineMode=="cycle" ? "selected" : "" ?>>Zyklische Farben</option>
                    </select>
                </div>
                <div class="form-row"><label for="lineColor_<?= $this->id ?>">Farbe (bei fest)</label>
                    <input type="text" name="lineColor_<?= $this->id ?>" id="lineColor_<?= $this->id ?>" value="<?= $this->lineColor ?>">
                </div>
            </fieldset>
            <!-- Zyklische Farben -->
            <fieldset class="color-fieldset" id="cycleColors_<?= $this->id ?>">
                <legend>Zyklische Farben</legend>
                <div class="color-grid">
                    <?php for ($i=1;$i<=6;$i++): $val = $this->cycleColors[$i-1] ?? ''; ?>
                        <div class="color-cell">
                            <label for="cycleColor<?= $i ?>_<?= $this->id ?>">Farbe <?= $i ?></label>
                            <input type="text" name="cycleColor<?= $i ?>_<?= $this->id ?>" id="cycleColor<?= $i ?>_<?= $this->id ?>" value="<?= $val ?>">
                        </div>
                    <?php endfor; ?>
                    </div>
            </fieldset>
            <!-- Optionen -->
            <fieldset>
                <legend>Weitere Optionen</legend>
                <div class="form-row">
                    <label for="showEllipse_<?= $this->id ?>">Ellipse anzeigen</label>
                    <input type="hidden" name="showEllipse_<?= $this->id ?>" value="0">
                    <input type="checkbox" name="showEllipse_<?= $this->id ?>" id="showEllipse_<?= $this->id ?>" value="1" <?= $this->showEllipse ? 'checked' : '' ?>>
                </div>
                <div class="form-row">
                    <label for="showCircle_<?= $this->id ?>">Kreise anzeigen</label>
                    <input type="hidden" name="showCircle_<?= $this->id ?>" value="0">
                    <input type="checkbox" name="showCircle_<?= $this->id ?>" id="showCircle_<?= $this->id ?>" value="1" <?= $this->showCircle ? 'checked' : '' ?>>
                </div>
            </fieldset>
            <!-- Aktionen -->
            <div class="form-actions">
                <button type="submit" onclick="this.closest('dialog').close()">Neu zeichnen</button>
                <button type="button" onclick="closeEllipseDialog(<?= $this->id ?>)">Konfiguration Schlie√üen</button>
                <button type="button" onclick="toggleHelp(<?= $this->id ?>, true)">‚ùì Hilfe</button>

            </div>
        </form>
        <!-- Hilfe-Popup -->
        <div id="help-popup-<?= $this->id ?>" class="help-popup" onclick="toggleHelp(<?= $this->id ?>, false)">
            <div id="help-content-<?= $this->id ?>" class="help-content" onclick="event.stopPropagation()">
                <h3>Hilfe zu den Parametern</h3>
                <p>√Ñnderungen werden erst mit "Neu zeichnen" √ºbernommen.</p>
                <ul>
                    <li><b>A</b>: Halbachse A</li>
                    <li><b>B</b>: Halbachse B</li>
                    <li><b>Umdrehungen</b>: Anzahl der Umdrehungen</li>
                    <li><b>Schrittweite</b>: Abstand der Punkte</li>
                    <li><b>Reihenfolge</b>: Wie Punkte verbunden werden</li>
                    <li><b>Kreisradius</b>: Radius des abrollenden Kreises</li>
                    <li><b>Abstand</b>: Abstand vom Ellipsenrand</li>
                    <li><b>Linienst√§rke</b>: Dicke der Linien</li>
                    <li><b>Linienmodus</b>: Fest oder Zyklisch</li>
                    <li><b>Farbe</b>: wird die Farbe als Text angebenen, so muss sie existierern<br>sonst erfolgt keine Anzeige</li>
                    <li><b>Farbe</b>: Linienfarbe</li>
                    <li><b>Zyklische Farben</b>: Farben im Wechsel</li>
                    <li><b>Debug</b>: Zusatzinfos</li>
                </ul>
                <button onclick="toggleHelp(<?= $this->id ?>, false)">Schlie√üen</button>
            </div>
        </div>
    </dialog>
    <!-- Aktionsbuttons au√üerhalb des Dialogs -->
    <div class="ellipse-actions">
        <button type="button" onclick="submitEllipseForm(<?= $this->id ?>)">üîÑ Neu zeichnen</button>
        <button type="button" onclick="printSVG(<?= $this->id ?>)">üñ® SVG drucken</button>
        <button type="button" onclick="downloadSVG(<?= $this->id ?>)">üíæ SVG speichern</button>
    </div>

    <!-- Neues Formular: Darstellung speichern -->
    <form method="post" class="ellipse-save-form" style="margin-top:1em;">
        <!-- CSRF-Schutz (Contao 5-kompatibel) -->
        <?php echo '<input type="hidden" name="REQUEST_TOKEN" value="' . \Contao\System::getContainer()->get("contao.csrf.token_manager")->getDefaultTokenValue() . '">'; ?>
        <!-- Formularkennung f√ºr Contao -->
        <input type="hidden" name="FORM_SUBMIT" value="ellipse_save_<?= $this->id ?>">
        <input type="hidden" name="ceId" value="<?= $this->id ?>">
        <!-- Eingabefeld f√ºr Zusatzinfo -->
        <input type="text" name="info_<?= $this->id ?>" placeholder="Erkl√§rung hinzuf√ºgen" style="width:70%;">

        <!-- Absende-Button -->
        <button type="submit" name="saveEllipse_<?= $this->id ?>" class="button-save"> Darstellung speichern </button>
    </form>
    <!-- Erfolgsmeldung speichern -->
    <?php 
        if (isset($this->saveMessage)) {
            $cl = $this->saveSuccess ? 'save-ok' : 'save-warning' ;
            echo "<p class='$cl'>". $this->saveMessage . "</p>";
        }
    ?>
        <!-- SVG-Ausgabe -->
    <svg id="ellipse-svg-<?= $this->id ?>" xmlns="http://www.w3.org/2000/svg" width="100%" height="500" viewBox="<?= $this->viewBox ?>">
            <defs>
                <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto" markerUnits="strokeWidth">
                    <polygon points="0 0, 10 3.5, 0 7" fill="black" />
                </marker>
            </defs>
    
    <?php 
        if (!empty($this->errorMsg))  {
            echo "<text x='20' y='40' fill='red' font-size='16'>" . $this->errorMsg . "</text>";
        }
        $n = count($this->points);
        for ($i = 0; $i < $n; $i++) {
            $j = ($i + $this->ReihenfolgePkt) % $n;
            $x1 = $this->points[$i]['x'];
            $y1 = -$this->points[$i]['y'];
            $x2 = $this->points[$j]['x'];
            $y2 = -$this->points[$j]['y'];
            $color = ($this->lineMode === "cycle") ? $this->cycleColors[$i % count($this->cycleColors)] : $this->lineColor;
            $lineWidth = $this->lineWidth;
                if ($this->showCircle) {
                    echo "<line x1='$x1' y1='$y1' x2='$x2' y2='$y2' stroke='$color' stroke-width='$lineWidth' marker-end='url(#arrowhead)' />";
                } else {
                    echo "<line x1='$x1' y1='$y1' x2='$x2' y2='$y2' stroke='$color' stroke-width='$lineWidth' />";
                }
        }

        if ($this->showEllipse) {
            echo "<ellipse cx='0' cy='0' rx='".$this->A."' ry='".$this->B."' stroke='red' stroke-width='$lineWidth' fill='none' />";
        }

        if ($this->showCircle) {
            foreach ($this->points as $idx => $p) {
                $x = $p['x']; $y = -$p['y'];
                $x1 = $p['x1']; $y1 = -$p['y1'];
                $m1 = $p['m1']; $n1 = -$p['n1'];
                echo "<circle cx='$x' cy='$y' r='2' fill='none' stroke='black' stroke-width='$lineWidth'/>";
                echo "<circle cx='$m1' cy='$n1' r='".$this->Kreisradius."' fill='none' stroke='green' stroke-width='$lineWidth'/>";
                echo "<circle cx='$m1' cy='$n1' r='0.5' fill='green' stroke='green' stroke-width='$lineWidth'/>";
                echo "<circle cx='$x1' cy='$y1' r='2' fill='purple' stroke='purple' stroke-width='$lineWidth'/>";
            }
        }
        ?>

    </svg>

    <!-- Debug -->
    <?php 
        if (count($this->debugline) > 0) {
            echo "<div class='debug'>";
            foreach ($this->debugline as $l) echo "$l<br>";
            echo "</div>";
        } 
    ?>

</div>

<style>
/* Popup konfiguration */
/* help anzeige */
#help-popup-<?= $this->id ?> {
  position: fixed;                 /* darf fixed bleiben */
  top: 30%;
  left: 0;
  width: auto;                     /* kein Vollbild mehr */
  height: auto;
  background-color: transparent;   /* kein Abdunkeln */
  display: none;
  justify-content: flex-start;
  align-items: flex-start;
  z-index: 9999;
  pointer-events: none;            /* Klicks durchlassen */
}

/* Popup Content */
#help-content-<?= $this->id ?> {
  background: #f5f5c0;
  border: 1px solid #999;
  padding: 20px;
  border-radius: 20px;
  font-family: monospace;
  pointer-events: auto;            /* Hilfe bleibt klickbar */
  box-shadow: 0 4px 12px rgba(0,0,0,0.3);
}

/* Parameter Dialog */
.ellipse-dialog {
  position: fixed;
  border-radius: 20px;
  top: 30%;
  left: 7%;
}
</style>
<script>
function submitEllipseForm(id) {
  const dlg = document.getElementById("ellipseDialog_" + id);
  const form = document.getElementById("ellipseForm_" + id);
  if (!form) return;
  if (!dlg.open) dlg.show();
  form.submit();
  dlg.close();
}

function openHelp<?= $this->id ?>() {
  document.getElementById('help-popup-<?= $this->id ?>').style.display = 'flex';
}
function toggleHelp(id, show) {
  const popup = document.getElementById('help-popup-' + id);
  popup.style.display = show ? 'flex' : 'none';
}
function toggleCycleColors(id) {
  const mode = document.getElementById("lineMode_" + id).value;
  const fieldset = document.getElementById("cycleColors_" + id);
  fieldset.style.display = (mode === "cycle") ? "block" : "none";
}
document.addEventListener("DOMContentLoaded", () => {
  toggleCycleColors(<?= $this->id ?>);
});
function printSVG(id) {
  const svg = document.getElementById("ellipse-svg-" + id).outerHTML;
  const win = window.open('', '_blank');
  win.document.open();
  const str = '<html><head><title>Drucken</title></head>' +
              '<body onload="window.print();window.close()">' +
              svg +
              '<\/body><\/html>';
  win.document.write(str);
  win.document.close();
}
function downloadSvg<?= $this->id ?>() {
  const svg = document.getElementById("ellipse-svg-<?= $this->id ?>").outerHTML;
  const blob = new Blob([svg], {type:"image/svg+xml;charset=utf-8"});
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "ellipse-krell-<?= $this->id ?>.svg";
  link.click();
}
// --- Dialogsteuerung ---
document.addEventListener("DOMContentLoaded", () => {
    const dlg = document.getElementById("ellipseDialog_<?= $this->id ?>");
    const active = <?= $this->templateSelectionActive ? 'true' : 'false' ?>;
    if (active && dlg && !dlg.open) {
        setTimeout(() => dlg.show(), 100);
    }
});

function keepDialogOpen(id) {
    // Flag in hidden field setzen, damit PHP wei√ü: Dialog aktiv
    const field = document.querySelector(`#ellipseDialog_${id} input[name='templateSelectionActive_${id}']`);
    if (field) field.value = "1";
}

function closeEllipseDialog(id) {
    const dlg = document.getElementById("ellipseDialog_" + id);
    if (!dlg) return;
    dlg.close();

    // Flag auf 0 setzen und neu laden, damit PHP den Dialog wieder zu l√§sst
    const url = new URL(window.location.href);
    url.searchParams.set("templateSelectionActive_" + id, "0");
    window.location.href = url.toString();
}
// --- Dialog per Maus verschieben ---
function makeDialogDraggable(dialogId, handleSelector = '.dialog-drag-handle') {
    const dlg = document.getElementById(dialogId);
    const handle = dlg.querySelector(handleSelector);
    if (!dlg || !handle) return;

    let offsetX = 0, offsetY = 0, dragging = false;

    handle.style.cursor = 'move';

    handle.addEventListener('mousedown', e => {
        dragging = true;
        offsetX = e.clientX - dlg.offsetLeft;
        offsetY = e.clientY - dlg.offsetTop;
        dlg.style.position = 'fixed';
        dlg.style.margin = 0;
        e.preventDefault();
    });

    document.addEventListener('mousemove', e => {
        if (!dragging) return;
        dlg.style.left = (e.clientX - offsetX) + 'px';
        dlg.style.top  = (e.clientY - offsetY) + 'px';
    });

    document.addEventListener('mouseup', () => dragging = false);
}

// Beim Laden aktivieren
document.addEventListener("DOMContentLoaded", () => {
    makeDialogDraggable("ellipseDialog_<?= $this->id ?>");
});

</script>
