<?php
// üîπ Hilfsfunktion zur Ausgabe aller Hidden-Felder

function renderEllipseHiddenFields($context)
{
    $id = $context->id;

    // üü© Sicherstellen, dass cycleColors korrekt ist
    $colors = $context->cycleColors ?? [];

    // Wenn cycleColors ein JSON-String ist ‚Üí dekodieren
    if (is_string($colors)) {
        $decoded = json_decode($colors, true);
        if (json_last_error() === JSON_ERROR_NONE && is_array($decoded)) {
            $colors = $decoded;
        } else {
            // Fallback bei fehlerhaftem JSON
            $colors = ['red', 'green', 'blue', 'orange', 'purple', 'cyan'];
        }
    }

    // üü© Erneut als sauberes JSON encodieren
    $colorsJson = json_encode($colors, JSON_UNESCAPED_UNICODE);

    // üü© Hidden-Felder ausgeben
    return '
        <input type="hidden" name="REQUEST_TOKEN" value="' . htmlspecialchars($context->csrfToken, ENT_QUOTES) . '">
        <input type="hidden" name="ceId" value="' . htmlspecialchars($id, ENT_QUOTES) . '">
        <input type="hidden" name="A_' . $id . '" value="' . htmlspecialchars($context->A, ENT_QUOTES) . '">
        <input type="hidden" name="B_' . $id . '" value="' . htmlspecialchars($context->B, ENT_QUOTES) . '">
        <input type="hidden" name="Umdrehungen_' . $id . '" value="' . htmlspecialchars($context->Umdrehungen, ENT_QUOTES) . '">
        <input type="hidden" name="Schrittweite_' . $id . '" value="' . htmlspecialchars($context->Schrittweite, ENT_QUOTES) . '">
        <input type="hidden" name="R_' . $id . '" value="' . htmlspecialchars($context->R, ENT_QUOTES) . '">
        <input type="hidden" name="lineWidth_' . $id . '" value="' . htmlspecialchars($context->lineWidth, ENT_QUOTES) . '">
        <input type="hidden" name="lineColor_' . $id . '" value="' . htmlspecialchars($context->lineColor, ENT_QUOTES) . '">
        <input type="hidden" name="lineMode_' . $id . '" value="' . htmlspecialchars($context->lineMode, ENT_QUOTES) . '">
        <input type="hidden" name="cycleColors_' . $id . '" value=\'' . htmlspecialchars($colorsJson, ENT_QUOTES) . '\'>
    ';
}
?>



<div class="ce_ellipse" id="ce-<?= $this->id ?>">

    <?= $this->headlineHtml ?>

    <!-- ====================================================== -->
    <!-- üîπ Parameter-Dialog -->
    <!-- ====================================================== -->
    <dialog id="ellipseDialog_<?= $this->id ?>" class="ellipse-dialog">
        <form method="post" action="<?= \Contao\Environment::get('uri'); ?>" id="ellipseForm_<?= $this->id ?>">
            <input type="hidden" name="REQUEST_TOKEN" value="<?= $this->csrfToken ?>">
            <input type="hidden" name="FORM_SUBMIT" value="ellipse_form_<?= $this->id ?>">
            <input type="hidden" name="ceId" value="<?= $this->id ?>">


            <div class="dialog-drag-handle">Ziehen zum Verschieben</div>            
            <h3>Parameter anpassen</h3>

            <!-- Geometrie -->
            <fieldset>
                <legend>Geometrie</legend>
                <div class="form-row"><label>Halbachse A</label><input type="number" step="any" name="A_<?= $this->id ?>" value="<?= $this->A ?>"></div>
                <div class="form-row"><label>Halbachse B</label><input type="number" step="any" name="B_<?= $this->id ?>" value="<?= $this->B ?>"></div>
                <div class="form-row"><label>Umdrehungen</label><input type="number" step="any" name="Umdrehungen_<?= $this->id ?>" value="<?= $this->Umdrehungen ?>"></div>
                <div class="form-row"><label>Punktschrittweite</label><input type="number" step="any" name="Schrittweite_<?= $this->id ?>" value="<?= $this->Schrittweite ?>"></div>
                <div class="form-row"><label>Reihenfolge Pkt</label><input type="number" step="any" name="ReihenfolgePkt_<?= $this->id ?>" value="<?= $this->ReihenfolgePkt ?>"></div>
            </fieldset>
            <!-- Darstellung -->
            <fieldset>
                <legend>Darstellung</legend>
                <div class="form-row"><label>Linienst√§rke</label><input type="number" step="any" name="lineWidth_<?= $this->id ?>" value="<?= $this->lineWidth ?>"></div>
                <div class="form-row">
                    <label>Linienmodus</label>
                    <select name="lineMode_<?= $this->id ?>" id="lineMode_<?= $this->id ?>" onchange="toggleCycleColors(<?= $this->id ?>)">
                        <option value="fixed" <?= $this->lineMode == 'fixed' ? 'selected' : '' ?>>Feste Farbe</option>
                        <option value="cycle" <?= $this->lineMode == 'cycle' ? 'selected' : '' ?>>Zyklische Farben</option>
                    </select>
                </div>
                <div class="form-row"><label>Farbe (fest)</label><input type="text" name="lineColor_<?= $this->id ?>" value="<?= $this->lineColor ?>"></div>
            </fieldset>
            <fieldset id="cycleColors_<?= $this->id ?>" class="color-fieldset">
                <legend>Zyklische Farben</legend>
                <div class="color-grid">
                    <?php if (!empty($this->cycleColors) && is_iterable($this->cycleColors)): ?>
                        <?php foreach ($this->cycleColors as $index => $val): ?>
                            <div class="color-cell">
                                <label>Farbe <?= $index + 1 ?></label>
                                <input type="text" name="cycleColor_<?= $index ?>_<?= $this->id ?>" value="<?= $val ?>">
                            </div>
                        <?php endforeach; ?>
                    <?php else: ?>
                        <div class="color-cell">
                            <em>Keine Farben definiert.</em>
                        </div>
                    <?php endif; ?>
                </div>
            </fieldset>
            <!-- Optionen -->
            <fieldset>
                <legend>Optionen</legend>
                <div class="form-row">
                    <label for="showEllipse_<?= $this->id ?>">Ellipse anzeigen</label>
                    <select name="showEllipse_<?= $this->id ?>" id="showEllipse_<?= $this->id ?>">
                        <option value="0" <?= empty($this->showEllipse) ? 'selected' : '' ?>>Nein</option>
                        <option value="1" <?= !empty($this->showEllipse) ? 'selected' : '' ?>>Ja</option>
                    </select>
                </div>
                <div class="form-row">
                    <label for="showCircle_<?= $this->id ?>">Punkte anzeigen</label>
                    <select name="showCircle_<?= $this->id ?>" id="showCircle_<?= $this->id ?>">
                        <option value="0" <?= empty($this->showCircle) ? 'selected' : '' ?>>Nein</option>
                        <option value="1" <?= !empty($this->showCircle) ? 'selected' : '' ?>>Ja</option>
                    </select>
                </div>
            </fieldset>
            <div class="form-actions">
                <button type="submit">Neu zeichnen</button>
                <button type="button" onclick="closeEllipseDialog(<?= $this->id ?>)">Schlie√üen</button>
                <button type="button" onclick="toggleHelp(<?= $this->id ?>, true)">‚ùì Hilfe</button>
            </div>
        </form>
    </dialog>

    <!-- Hilfe -->
    <div id="help-popup-<?= $this->id ?>" class="help-popup" onclick="toggleHelp(<?= $this->id ?>, false)">
        <div id="help-content-<?= $this->id ?>" class="help-content" onclick="event.stopPropagation()">
            <h3>Hilfe zu den Parametern</h3>
            <ul>
                <li><b>A</b>: Halbachse A</li>
                <li><b>B</b>: Halbachse B</li>
                <li><b>Umdrehungen</b>: Anzahl der Uml√§ufe</li>
                <li><b>Schrittweite</b>: Punktabstand</li>
                <li><b>Reihenfolge</b>: Punktverbindung</li>
                <li><b>Linienst√§rke</b>: Strichdicke</li>
                <li><b>Linienmodus</b>: fest oder zyklisch</li>
                <li><b>Farbe</b>: Name oder Hex (#rrggbb)</li>
            </ul>
            <button type="button" onclick="toggleHelp(<?= $this->id ?>, false)">Schlie√üen</button>
        </div>
    </div>

    <!-- ====================================================== -->
    <!-- üîπ Konfiguration anzeigen -->
    <!-- ====================================================== -->
  <?php 
  echo "<br>hiddenfields <pre>".renderEllipseHiddenFields($this)."</pre><br>"; 
  ?>
<form method="post" action="<?= \Contao\Environment::get('uri'); ?>" id="ellipse-toggle-<?= $this->id ?>" class="ellipse-form">
  <?= renderEllipseHiddenFields($this) ?>
  <input type="hidden" name="FORM_SUBMIT" value="ellipse_toggle_<?= $this->id ?>">

  <label for="templateSelectionActive_<?= $this->id ?>"><strong>Konfiguration anzeigen</strong></label>
  <select name="templateSelectionActive_<?= $this->id ?>"
          id="templateSelectionActive_<?= $this->id ?>"
          onchange="this.form.requestSubmit();">
      <option value="0" <?= empty($this->templateSelectionActive) ? 'selected' : '' ?>>Nein</option>
      <option value="1" <?= !empty($this->templateSelectionActive) ? 'selected' : '' ?>>Ja</option>
  </select>
</form>

    <!-- ====================================================== -->
    <!-- üîπ Speichern -->
    <!-- ====================================================== -->
    <div class="ellipse-save">
        <label><input type="checkbox" id="toggleSaveForm_<?= $this->id ?>"><strong>Darstellung speichern</strong></label>
        <div id="saveFormWrapper_<?= $this->id ?>" class="ellipse-form-section">
<!-- form_save.html5 -->
<form method="post" action="<?= \Contao\Environment::get('uri'); ?>">
    <input type="hidden" name="REQUEST_TOKEN" value="<?= $this->csrfToken ?>">
    <input type="hidden" name="FORM_SUBMIT" value="ellipse_save_<?= $this->id ?>">
    <input type="hidden" name="ceId" value="<?= $this->id ?>">
    <!-- üîπ alle wichtigen Parameter als hidden mitgeben -->
    <input type="hidden" name="A" value="<?= $this->A ?>">
    <input type="hidden" name="B" value="<?= $this->B ?>">
    <input type="hidden" name="Umdrehungen" value="<?= $this->Umdrehungen ?>">
    <input type="hidden" name="Schrittweite" value="<?= $this->Schrittweite ?>">
    <input type="hidden" name="R" value="<?= $this->R ?>">
    <input type="hidden" name="lineWidth" value="<?= $this->lineWidth ?>">
    <input type="hidden" name="lineColor" value="<?= $this->lineColor ?>">
    <input type="hidden" name="lineMode" value="<?= $this->lineMode ?>">

<!-- richtig -->
<input type="hidden" name="cycleColors_<?= $this->id ?>" value='<?= json_encode($this->cycleColors, JSON_UNESCAPED_UNICODE) ?>'>
    
    <label>Titel der Darstellung:</label>
    <input type="text" name="info_<?= $this->id ?>" value=""><br>
    <button type="submit">üíæ Speichern</button>
</form>
            <?php if (isset($this->saveMessage)): ?>
                <p class="<?= $this->saveSuccess ? 'save-ok' : 'save-warning' ?>"><?= $this->saveMessage ?></p>
            <?php endif; ?>
        </div>
    </div>

    <!-- ====================================================== -->
    <!-- üîπ Laden -->
    <!-- ====================================================== -->
    <div class="ellipse-load">
        <label><input type="checkbox" id="toggleLoadForm_<?= $this->id ?>"><strong>Darstellung laden/l√∂schen</strong></label>
        <div id="loadFormWrapper_<?= $this->id ?>" class="ellipse-form-section">
            <form method="post" action="<?= \Contao\Environment::get('uri'); ?>">
                <input type="hidden" name="REQUEST_TOKEN" value="<?= $this->csrfToken ?>">
                <input type="hidden" name="FORM_SUBMIT" value="ellipse_load_<?= $this->id ?>">
                <input type="hidden" name="ceId" value="<?= $this->id ?>">
                <select name="variantId" style="width:70%;">
                    <option value="">-- Variante w√§hlen --</option>
                    <?php foreach (($this->savedVariants ?? []) as $v): ?>
                        <option value="<?= $v['id'] ?>"><?= $v['title'] ?></option>
                    <?php endforeach; ?>
                </select>
                <button type="submit" name="loadAction" value="load">üîµ Laden</button>
                <button type="submit" name="loadAction" value="delete" onclick="return confirm('Wirklich l√∂schen?');">‚ùå L√∂schen</button>
            </form>
            <?php if (isset($this->loadMessage)): ?>
                <p class="<?= $this->loadSuccess ? 'save-ok' : 'save-warning' ?>"><?= $this->loadMessage ?></p>
            <?php endif; ?>
        </div>
    </div>
<?php
echo "<br>lineMode=" . htmlspecialchars($this->lineMode) . "<br>";
echo "<br>cycleColors=" . print_r($this->cycleColors, true) . "<br>";
echo "<br>anzahl Punkte " . count($this->points) . "<br>";
?>

    <!-- ====================================================== -->
    <!-- üîπ SVG-Ausgabe -->
    <!-- ====================================================== -->
    <div id="svg-container-<?= $this->id ?>">
        <svg id="ellipse-svg-<?= $this->id ?>" xmlns="http://www.w3.org/2000/svg" viewBox="<?= $this->viewBox ?>" preserveAspectRatio="xMidYMid meet">
            <?php 
                $lineWidth = $this->lineWidth;
                $n = count($this->points);
                if ($this->showEllipse) {
                    echo "<ellipse cx='0' cy='0' rx='{$this->A}' ry='{$this->B}' stroke='red' stroke-width='$lineWidth' fill='none' />";
                }
                foreach ($this->points as $i => $p) {
                    $j = ($i + $this->ReihenfolgePkt) % $n;
                    $x1 = $p['x']; $y1 = -$p['y'];
                    $x2 = $this->points[$j]['x']; $y2 = -$this->points[$j]['y'];
                    $color = ($this->lineMode === 'cycle') ? $this->cycleColors[$i % count($this->cycleColors)] : $this->lineColor;
                    echo "<line x1='$x1' y1='$y1' x2='$x2' y2='$y2' stroke='$color' stroke-width='$lineWidth' />";
                }
                if ($this->showCircle) {
                    foreach ($this->points as $idx => $p) {
                        $x = $p['x']; $y = -$p['y'];
                        echo "<circle cx='$x' cy='$y' r='0.1' stroke='black' stroke-width='$lineWidth' fill='none'/>";
                    }
                }
            ?>
        </svg>
    </div>
</div>

<!-- ====================================================== -->
<!-- üîπ Styles -->
<!-- ====================================================== -->
<style>
.ellipse-dialog { position: fixed; top: 30%; left: 7%; border-radius: 20px; }
.dialog-drag-handle { cursor: move; background: #eee; padding: 5px; border-radius: 6px; }
.help-popup { position: fixed; top: 30%; left: 0; display: none; background: transparent; z-index: 9999; pointer-events: none; }
.help-content { background: #f5f5c0; border: 1px solid #999; padding: 20px; border-radius: 20px; pointer-events: auto; }
.ellipse-form-section { overflow: hidden; max-height: 0; opacity: 0; transition: all 0.3s ease-in-out; }
.ellipse-form-section.active { max-height: 500px; opacity: 1; }
.save-ok { background: #d8ffd8; border: 1px solid #0a0; padding: 4px; }
.save-warning { background: #fff2cc; border: 1px solid #cc0; padding: 4px; }
</style>

<!-- ====================================================== -->
<!-- üîπ Scripts -->
<!-- ====================================================== -->
<script>
function toggleHelp(id, show){document.getElementById("help-popup-"+id).style.display=show?"flex":"none";}
function toggleCycleColors(id){
    const mode=document.getElementById("lineMode_"+id).value;
    document.getElementById("cycleColors_"+id).style.display=(mode==="cycle")?"block":"none";
}
document.addEventListener("DOMContentLoaded",()=>toggleCycleColors(<?= $this->id ?>));
document.addEventListener("DOMContentLoaded", () => {
    const ceId = <?= json_encode($this->id) ?>;
    const dlg = document.getElementById("ellipseDialog_" + ceId);

    // üü¢ Dialog beim Laden √∂ffnen, wenn aktiviert
    if (<?= $this->templateSelectionActive ? 'true' : 'false' ?> && dlg && !dlg.open) {
        setTimeout(() => dlg.show(), 200);
    }
});

// üî¥ Dialog schlie√üen + Selectbox zur√ºcksetzen
function closeEllipseDialog(id) {
    const dlg = document.getElementById("ellipseDialog_" + id);
    if (dlg) dlg.close();

    const select = document.getElementById("templateSelectionActive_" + id);
    if (select) {
        select.value = "0"; // nur UI auf "Nein" setzen
    }
}

function makeDialogDraggable(dialogId,handleSelector='.dialog-drag-handle'){
    const dlg=document.getElementById(dialogId);const handle=dlg.querySelector(handleSelector);
    if(!dlg||!handle)return;let ox=0,oy=0,drag=false;
    handle.addEventListener('mousedown',e=>{drag=true;ox=e.clientX-dlg.offsetLeft;oy=e.clientY-dlg.offsetTop;dlg.style.position='fixed';dlg.style.margin=0;e.preventDefault();});
    document.addEventListener('mousemove',e=>{if(!drag)return;dlg.style.left=(e.clientX-ox)+'px';dlg.style.top=(e.clientY-oy)+'px';});
    document.addEventListener('mouseup',()=>drag=false);
}
document.addEventListener("DOMContentLoaded",()=>makeDialogDraggable("ellipseDialog_<?= $this->id ?>"));
document.addEventListener("DOMContentLoaded",()=>{
    const saveToggle=document.getElementById("toggleSaveForm_<?= $this->id ?>");
    const saveForm=document.getElementById("saveFormWrapper_<?= $this->id ?>");
    const loadToggle=document.getElementById("toggleLoadForm_<?= $this->id ?>");
    const loadForm=document.getElementById("loadFormWrapper_<?= $this->id ?>");
    if(saveToggle&&saveForm)saveToggle.addEventListener("change",()=>saveForm.classList.toggle("active",saveToggle.checked));
    if(loadToggle&&loadForm)loadToggle.addEventListener("change",()=>loadForm.classList.toggle("active",loadToggle.checked));
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const ceId = <?= json_encode($this->id) ?>;

    // Warte etwas, bis der Dialog-Inhalt wirklich im DOM steht
    setTimeout(() => {
        const form = document.getElementById(`ellipseForm_${ceId}`);
        const hidden = form?.querySelector(`input[name="cycleColors_${ceId}"]`);
        const inputs = form?.querySelectorAll(`#cycleColors_${ceId} input[type="text"]`);
        const button = form?.querySelector('button[type="submit"]');

        console.log("üé® Initialisierung CE:", ceId);
        console.log("   Formular gefunden?", !!form);
        console.log("   Hidden-Feld gefunden?", !!hidden);
        console.log("   Farbinputs gefunden:", inputs?.length ?? 0);

        if (!form || !hidden || !inputs || inputs.length === 0) {
            console.warn(`‚ö†Ô∏è CE ${ceId}: Keine g√ºltigen Farbfelder gefunden`);
            return;
        }

        // üîÑ Funktion: Alle Farben ins Hidden-Feld schreiben
        function updateColors() {
            const colors = Array.from(inputs).map(inp => inp.value.trim());
            const json = JSON.stringify(colors);
            hidden.value = json;
            console.log(`‚úÖ [CE ${ceId}] cycleColors aktualisiert:`, json);
        }

        // Bei jeder √Ñnderung sofort aktualisieren
        inputs.forEach(input => {
            input.addEventListener("input", updateColors);
            input.addEventListener("change", updateColors);
        });

        // Beim Absenden (Neu zeichnen) sicherstellen
        form.addEventListener("submit", function (e) {
            updateColors();
        });

        // Initial beim Laden einmal setzen (damit kein leeres "[" kommt)
        updateColors();
    }, 300);
});
</script>



