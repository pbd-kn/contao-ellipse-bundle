<?php
// üîπ Hilfsfunktion zur Ausgabe aller Hidden-Felder
function renderEllipseHiddenFields($context)
{
    $id = $context->id;

    // üü© Sicherstellen, dass cycleColors korrekt ist
    $colors = $context->cycleColors ?? [];
    if (is_string($colors)) {
        $decoded = json_decode($colors, true);
        if (json_last_error() === JSON_ERROR_NONE && is_array($decoded)) {
            $colors = $decoded;
        } else {
            $colors = ['red', 'green', 'blue', 'orange', 'purple', 'cyan'];
        }
    }

    $colorsJson = json_encode($colors, JSON_UNESCAPED_UNICODE);

    return '
        <input type="hidden" name="REQUEST_TOKEN" value="' . htmlspecialchars($context->csrfToken, ENT_QUOTES) . '">
        <input type="hidden" name="ceId" value="' . htmlspecialchars($id, ENT_QUOTES) . '">
        <input type="hidden" name="A_' . $id . '" value="' . htmlspecialchars($context->A, ENT_QUOTES) . '">
        <input type="hidden" name="B_' . $id . '" value="' . htmlspecialchars($context->B, ENT_QUOTES) . '">
        <input type="hidden" name="Umdrehungen_' . $id . '" value="' . htmlspecialchars($context->Umdrehungen, ENT_QUOTES) . '">
        <input type="hidden" name="Schrittweite_' . $id . '" value="' . htmlspecialchars($context->Schrittweite, ENT_QUOTES) . '">
        <input type="hidden" name="ReihenfolgePkt_' . $id . '" value="' . htmlspecialchars($context->ReihenfolgePkt, ENT_QUOTES) . '">
        <input type="hidden" name="lineWidth_' . $id . '" value="' . htmlspecialchars($context->lineWidth, ENT_QUOTES) . '">
        <input type="hidden" name="lineColor_' . $id . '" value="' . htmlspecialchars($context->lineColor, ENT_QUOTES) . '">
        <input type="hidden" name="lineMode_' . $id . '" value="' . htmlspecialchars($context->lineMode, ENT_QUOTES) . '">
        <input type="hidden" name="cycleColors_' . $id . '" value=\'' . htmlspecialchars($colorsJson, ENT_QUOTES) . '\'>
        <input type="hidden" name="showEllipse_' . $id . '" value=\'' . htmlspecialchars($context->showEllipse, ENT_QUOTES) . '\'>
        <input type="hidden" name="showCircle_' . $id . '" value=\'' . htmlspecialchars($context->showCircle, ENT_QUOTES) . '\'>        
    ';
}
?>

<div class="ce_ellipse" id="ce-<?= $this->id ?>">
<?= $this->headlineHtml ?>

<form method="post" class="ellipse-form" action="<?= \Contao\Environment::get('uri'); ?>" id="ellipseForm_<?= $this->id ?>">
    <input type="hidden" name="REQUEST_TOKEN" value="<?= $this->csrfToken ?>">
    <input type="hidden" name="FORM_SUBMIT" value="ellipse_form_<?= $this->id ?>">
    <input type="hidden" name="ceId" value="<?= $this->id ?>">
    <input type="hidden" name="templateSelectionActive_<?= $this->id ?>" value="0">

<div>
  <input type="checkbox"
         id="templateSelectionActive_<?= $this->id ?>"
         name="templateSelectionActive_<?= $this->id ?>"
         value="1"
         <?= $this->templateSelectionActive ? 'checked' : '' ?>
         onchange="toggleConfigSection('<?= $this->id ?>')">

  <label>
    <strong>Darstellung konfigurieren</strong>
  </label>
</div>


    <!-- Parameter-Bereich ein-/ausklappbar -->
    <div id="configSection_<?= $this->id ?>" class="ellipse-config-section" style="<?= $this->templateSelectionActive ? '' : 'display:none;' ?>">

        <h3>Parameter anpassen</h3>

        <!-- Geometrie -->
        <fieldset>
            <legend>Geometrie</legend>
            <div class="form-row"><label>Halbachse A</label><input type="number" step="any" name="A_<?= $this->id ?>" value="<?= $this->A ?>"></div>
            <div class="form-row"><label>Halbachse B</label><input type="number" step="any" name="B_<?= $this->id ?>" value="<?= $this->B ?>"></div>
            <div class="form-row"><label>Umdrehungen</label><input type="number" step="any" name="Umdrehungen_<?= $this->id ?>" value="<?= $this->Umdrehungen ?>"></div>
            <div class="form-row"><label>Punktschrittweite</label><input type="number" step="any" name="Schrittweite_<?= $this->id ?>" value="<?= $this->Schrittweite ?>"></div>
            <div class="form-row"><label>Reihenfolge</label><input type="number" step="any" name="ReihenfolgePkt_<?= $this->id ?>" value="<?= $this->ReihenfolgePkt ?>"></div>
        </fieldset>

        <!-- Darstellung -->
        <fieldset>
            <legend>Darstellung</legend>
            <div class="form-row"><label>Linienst√§rke</label><input type="number" step="any" name="lineWidth_<?= $this->id ?>" value="<?= $this->lineWidth ?>"></div>
            <div class="form-row">
                <label>Linienmodus</label>
                <select name="lineMode_<?= $this->id ?>" id="lineMode_<?= $this->id ?>" onchange="toggleCycleColors(<?= $this->id ?>)">
                    <option value="fixed" <?= $this->lineMode == 'fixed' ? 'selected' : '' ?>>Feste Farbe</option>
                    <option value="cycle" <?= $this->lineMode == 'cycle' ? 'selected' : '' ?>>Zyklische Farben</option>
                </select>
            </div>
            <div class="form-row"><label>Farbe (fest)</label><input type="text" name="lineColor_<?= $this->id ?>" value="<?= $this->lineColor ?>"></div>
        </fieldset>

        <!-- Zyklische Farben -->
        <fieldset id="cycleColors_<?= $this->id ?>" class="color-fieldset">
            <legend>Zyklische Farben</legend>
            <div class="color-grid">
                <?php 
                    if (!empty($this->cycleColors) && is_iterable($this->cycleColors)) {
                        echo "<input type='hidden' name='cycleColors_" . $this->id . "' value='" . htmlspecialchars(json_encode($this->cycleColors, JSON_UNESCAPED_UNICODE), ENT_QUOTES) . "'>";
                        foreach ($this->cycleColors as $index => $val) {
                            echo "<div class='color-cell'>";
                                echo "<label>Farbe " . $index . "</label>";
                                echo "<input type='text' name='cycleColor_". $index ."_". $this->id  ."' value='". $val ."'>";
                            echo "</div>";
                        }
                    } else {
                        echo "<label>Zyklische Farben</label><em>Keine Farben definiert.</em>";
                    }
                ?>
            </div>
        </fieldset>

        <!-- Optionen -->
        <fieldset>
            <legend>Optionen</legend>
            <div class="form-row">
                <label for="showEllipse_<?= $this->id ?>">Ellipse anzeigen</label>
                <select name="showEllipse_<?= $this->id ?>" id="showEllipse_<?= $this->id ?>">
                    <option value="0" <?= empty($this->showEllipse) ? 'selected' : '' ?>>Nein</option>
                    <option value="1" <?= !empty($this->showEllipse) ? 'selected' : '' ?>>Ja</option>
                </select>
            </div>
            <div class="form-row">
                <label for="showCircle_<?= $this->id ?>">Punkte anzeigen</label>
                <select name="showCircle_<?= $this->id ?>" id="showCircle_<?= $this->id ?>">
                    <option value="0" <?= empty($this->showCircle) ? 'selected' : '' ?>>Nein</option>
                    <option value="1" <?= !empty($this->showCircle) ? 'selected' : '' ?>>Ja</option>
                </select>
            </div>
        </fieldset>

        <div class="form-actions">
            <button type="button" onclick="printSVG(<?= $this->id ?>)">SVG drucken</button>
            <button type="button" onclick="downloadSVG(<?= $this->id ?>)">SVG speichern</button>
            <button type="button" onclick="toggleHelp(<?= $this->id ?>, true)">Hilfe anzeigen</button>                
        </div>
    </div> <!-- /configSection -->
    <div class="form-actions">
        <button type="submit" name="submitted_<?= $this->id ?>" value="1">Neu zeichnen</button>
    </div>
</form>

<!-- ====================================================== -->
<!-- üîπ Hilfe -->
<!-- ====================================================== -->
<div id="help-popup-<?= $this->id ?>" class="help-popup" onclick="toggleHelp(<?= $this->id ?>, false)">
    <div id="help-content-<?= $this->id ?>" class="help-content" onclick="event.stopPropagation()">
        <div class="dialog-drag-handle">Ziehen zum Verschieben</div>            
        <h3>Hilfe zu den Parametern</h3>
        <ul>
            <li><b>A</b>: Halbachse A</li>
            <li><b>B</b>: Halbachse B</li>
            <li><b>Umdrehungen</b>: Anzahl der Uml√§ufe</li>
            <li><b>Schrittweite</b>: Punktabstand</li>
            <li><b>Reihenfolge</b>: Punktverbindung</li>
            <li><b>Linienst√§rke</b>: Strichdicke</li>
            <li><b>Linienmodus</b>: fest oder zyklisch</li>
            <li><b>Farbe</b>: Name oder Hex (#rrggbb)</li>
        </ul>
        <button class="close-help" type="button" onclick="toggleHelp(<?= $this->id ?>, false)">Schlie√üen</button>
    </div>
</div>

<!-- ====================================================== -->
<!-- üîπ Speichern -->
<!-- ====================================================== -->
<div class="ellipse-save">
    <label><input type="checkbox" id="toggleSaveForm_<?= $this->id ?>"><strong> Darstellung speichern</strong></label>
    <div id="saveFormWrapper_<?= $this->id ?>" class="ellipse-form-section">
        <form method="post" action="<?= \Contao\Environment::get('uri'); ?>">
            <input type="hidden" name="FORM_SUBMIT" value="ellipse_save_<?= $this->id ?>">
            <?= renderEllipseHiddenFields($this) ?>
            <label>Titel der Darstellung:</label>
            <input type="text" name="info" value=""><br>
            <button type="submit">üíæ Speichern</button>
        </form>
    </div>
</div>
<?php if (isset($this->saveMessage)): ?>
    <p class="<?= $this->saveSuccess ? 'save-ok' : 'save-warning' ?>"><?= $this->saveMessage ?></p>
<?php endif; ?>

<!-- ====================================================== -->
<!-- üîπ Laden -->
<!-- ====================================================== -->
<div class="ellipse-load">
    <label><input type="checkbox" id="toggleLoadForm_<?= $this->id ?>"><strong> Darstellung laden/l√∂schen</strong></label>
    <div id="loadFormWrapper_<?= $this->id ?>" class="ellipse-form-section">
        <form method="post" action="<?= \Contao\Environment::get('uri'); ?>">
            <input type="hidden" name="REQUEST_TOKEN" value="<?= $this->csrfToken ?>">
            <input type="hidden" name="FORM_SUBMIT" value="ellipse_load_<?= $this->id ?>">
            <input type="hidden" name="ceId" value="<?= $this->id ?>">
            <select name="variantId" style="width:70%;">
                <option value="">-- Darstellung w√§hlen --</option>
                <?php foreach (($this->savedVariants ?? []) as $v): ?>
                    <option value="<?= $v['id'] ?>"><?= $v['title'] ?></option>
                <?php endforeach; ?>
            </select>
            <button type="submit" name="loadAction" value="load">üîµ Laden</button>
            <button type="submit" name="loadAction" value="delete" onclick="return confirm('Wirklich l√∂schen?');">‚ùå L√∂schen</button>
        </form>
    </div>
</div>
<?php if (isset($this->loadMessage)): ?>
    <p class="<?= $this->loadSuccess ? 'save-ok' : 'save-warning' ?>"><?= $this->loadMessage ?></p>
<?php endif; ?>

<!-- ====================================================== -->
<!-- üîπ SVG-Ausgabe -->
<!-- ====================================================== -->
<div id="svg-container-<?= $this->id ?>">
    <svg id="ellipse-svg-<?= $this->id ?>" xmlns="http://www.w3.org/2000/svg" viewBox="<?= $this->viewBox ?>" preserveAspectRatio="xMidYMid meet">
        <?php 
            $lineWidth = $this->lineWidth;
            $n = count($this->points);
            if ($this->showEllipse) {
                echo "<ellipse cx='0' cy='0' rx='{$this->A}' ry='{$this->B}' stroke='red' stroke-width='$lineWidth' fill='none' />";
            }
            foreach ($this->points as $i => $p) {
                $j = ($i + $this->ReihenfolgePkt) % $n;
                $x1 = $p['x']; $y1 = -$p['y'];
                $x2 = $this->points[$j]['x']; $y2 = -$this->points[$j]['y'];
                $color = ($this->lineMode === 'cycle') ? $this->cycleColors[$i % count($this->cycleColors)] : $this->lineColor;
                echo "<line x1='$x1' y1='$y1' x2='$x2' y2='$y2' stroke='$color' stroke-width='$lineWidth' />";
            }
            if ($this->showCircle) {
                foreach ($this->points as $p) {
                    $x = $p['x']; $y = -$p['y'];
                    echo "<circle cx='$x' cy='$y' r='0.1' stroke='black' stroke-width='$lineWidth' fill='none'/>";
                }
            }
        ?>
    </svg>
</div>
</div> <!-- /ce_ellipse -->

<!-- ====================================================== -->
<!-- üîπ Scripts -->
<!-- ====================================================== -->
<script>
function toggleHelp(id, show){
  document.getElementById("help-popup-"+id).style.display = show ? "flex" : "none";
}

function toggleCycleColors(id) {
  const mode = document.getElementById("lineMode_" + id);
  const colors = document.getElementById("cycleColors_" + id);
  if (!mode || !colors) return;
  const val = mode.type === "checkbox" ? (mode.checked ? "cycle" : "fixed") : mode.value;
  colors.style.display = (val === "cycle") ? "block" : "none";
}

function toggleConfigSection(id) {
//debugger;
  console.log('toggle');
  const cb = document.getElementById("templateSelectionActive_" + id);
  console.log('toggle cb ' + cb);
  const section = document.getElementById("configSection_" + id);
  console.log('toggle section ' + section);
  if (!cb || !section) return;

  // Sichtbarkeit umschalten
  section.style.display = cb.checked ? "block" : "none";

  // üîπ Jetzt das verbundene hidden-Feld holen:
//debugger;
console.log('input[type="hidden"][name="templateSelectionActive_' + id + '"]');
  const hidden = document.querySelector('input[type="hidden"][name="templateSelectionActive_' + id + '"]');

  // üîπ Wert synchronisieren (damit beim POST der aktuelle Zustand mitkommt)
  if (hidden) {
    hidden.value = cb.checked ? '1' : '0';
    console.log('val: ' + hidden.value);
  }
}

// ======================================================
// üî∏ Drag-Funktion f√ºr das Hilfe-Fenster
// ======================================================
function enableDrag(elementId, handleClass) {
  const el = document.getElementById(elementId);
  const handle = el.querySelector('.' + handleClass);
  if (!el || !handle) return;

  let offsetX = 0, offsetY = 0, startX = 0, startY = 0, dragging = false;

  handle.style.cursor = "move";

  handle.addEventListener('mousedown', (e) => {
    dragging = true;
    startX = e.clientX;
    startY = e.clientY;
    const rect = el.getBoundingClientRect();
    offsetX = startX - rect.left;
    offsetY = startY - rect.top;
    el.style.position = 'absolute';
    el.style.zIndex = 10000;
    document.body.style.userSelect = "none";
  });

  document.addEventListener('mousemove', (e) => {
    if (!dragging) return;
    e.preventDefault();
    const x = e.clientX - offsetX;
    const y = e.clientY - offsetY;
    el.style.left = `${x}px`;
    el.style.top = `${y}px`;
  });

  document.addEventListener('mouseup', () => {
    dragging = false;
    document.body.style.userSelect = "";
  });
}

document.addEventListener("DOMContentLoaded",()=>toggleCycleColors(<?= $this->id ?>));
document.addEventListener("DOMContentLoaded",()=>{
 const id = <?= $this->id ?>; // ‚úÖ Variable definieren

  const saveToggle=document.getElementById("toggleSaveForm_<?= $this->id ?>");
  const saveForm=document.getElementById("saveFormWrapper_<?= $this->id ?>");
  const loadToggle=document.getElementById("toggleLoadForm_<?= $this->id ?>");
  const loadForm=document.getElementById("loadFormWrapper_<?= $this->id ?>");
  if(saveToggle&&saveForm)saveToggle.addEventListener("change",()=>saveForm.classList.toggle("active",saveToggle.checked));
  if(loadToggle&&loadForm)loadToggle.addEventListener("change",()=>loadForm.classList.toggle("active",loadToggle.checked));
    // üëâ Drag aktivieren
  enableDrag("help-content-" + id, "dialog-drag-handle");  
});



</script>
