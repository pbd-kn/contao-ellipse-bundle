<div class="ce_ellipse" id="ce-<?= $this->id ?>">
    <?= $this->headlineHtml ?>
<!-- Formular mit Checkbox -->
  <form method="get" id="ellipse-form-<?= $this->id ?>" class="ellipse-form">
      <input type="hidden" name="ceId" value="<?= $this->id ?>">

      <div class="form-row">
          <label for="templateSelectionActive_<?= $this->id ?>">Konfiguration anzeigen</label>
          <input type="hidden" name="templateSelectionActive_<?= $this->id ?>" value="0">
          <input type="checkbox"
                 name="templateSelectionActive_<?= $this->id ?>"
                 id="templateSelectionActive_<?= $this->id ?>"
                 value="1"
                 <?= $this->templateSelectionActive ? 'checked' : '' ?>
                 onchange="document.getElementById('ellipse-form-<?= $this->id ?>').submit()">
      </div>
  </form>
    <!-- Button: Parameter bearbeiten 
    <button type="button" onclick="document.getElementById('ellipseDialog_<?= $this->id ?>').showModal()">Parameter bearbeiten</button>
-->
    <!-- Parameter-Dialog -->
    <dialog id="ellipseDialog_<?= $this->id ?>" class="ellipse-dialog">
        <form method="get" id="ellipseForm_<?= $this->id ?>">
            <h3>Parameter anpassen</h3>
            <input type="hidden" name="ceId" value="<?= $this->id ?>">
            <input type="hidden" name="templateSelectionActive_<?= $this->id ?>" value="<?= $this->templateSelectionActive ? 1 : 0 ?>">

            <!-- Geometrie -->
            <fieldset>
                <legend>Geometrie</legend>
                <div class="form-row"><label>Halbachse A</label><input type="number" step="any" name="A_<?= $this->id ?>" value="<?= $this->A ?>"></div>
                <div class="form-row"><label>Halbachse B</label><input type="number" step="any" name="B_<?= $this->id ?>" value="<?= $this->B ?>"></div>
                <div class="form-row"><label>Umdrehungen</label><input type="number" step="any" name="Umdrehungen_<?= $this->id ?>" value="<?= $this->Umdrehungen ?>"></div>
                <div class="form-row"><label>Punktschrittweite</label><input type="number" step="any" name="Schrittweite_<?= $this->id ?>" value="<?= $this->Schrittweite ?>"></div>
                <div class="form-row"><label>Reihenfolge Pkt</label><input type="number" step="any" name="R_<?= $this->id ?>" value="<?= $this->R ?>"></div>
            </fieldset>
            <!-- Darstellung -->
            <fieldset>
                <legend>Darstellung</legend>
                <div class="form-row"><label>Linienst√§rke</label><input type="number" step="any" name="lineWidth_<?= $this->id ?>" value="<?= $this->lineWidth ?>"></div>
                <div class="form-row">
                    <label>Linienmodus</label>
                    <select name="lineMode_<?= $this->id ?>" id="lineMode_<?= $this->id ?>" onchange="toggleCycleColors(<?= $this->id ?>)">
                        <option value="fixed" <?= $this->lineMode == 'fixed' ? 'selected' : '' ?>>Feste Farbe</option>
                        <option value="cycle" <?= $this->lineMode == 'cycle' ? 'selected' : '' ?>>Zyklische Farben</option>
                    </select>
                </div>
                <div class="form-row"><label>Farbe (fest)</label><input type="text" name="lineColor_<?= $this->id ?>" value="<?= $this->lineColor ?>"></div>
            </fieldset>
            <!-- Zyklische Farben -->
            <fieldset id="cycleColors_<?= $this->id ?>" class="color-fieldset">
                <legend>Zyklische Farben</legend>
                <div class="color-grid">
                    <?php for ($i = 1; $i <= 6; $i++): $val = $this->cycleColors[$i - 1] ?? ''; ?>
                    <div class="color-cell"><label>Farbe <?= $i ?></label><input type="text" name="cycleColor<?= $i ?>_<?= $this->id ?>" value="<?= $val ?>"></div>
                    <?php endfor; ?>
                </div>
            </fieldset>
            <!-- Optionen -->
            <fieldset>
                <legend>Optionen</legend>
                <div class="form-row">
                    <label><input type="checkbox" name="showEllipse_<?= $this->id ?>" value="1" <?= $this->showEllipse ? 'checked' : '' ?>> Ellipse anzeigen</label>
                </div>
                <div class="form-row">
                    <label><input type="checkbox" name="showCircle_<?= $this->id ?>" value="1" <?= $this->showCircle ? 'checked' : '' ?>> Punkte anzeigen</label>
                </div>
            </fieldset>
            <div class="form-actions">
                <button type="submit" onclick="this.closest('dialog').close()">Neu zeichnen</button>
                <button type="button" onclick="closeEllipseDialog(<?= $this->id ?>)">Schlie√üen</button>
                <button type="button" onclick="toggleHelp(<?= $this->id ?>, true)">‚ùì Hilfe</button>
            </div>
        </form>

        <!-- Hilfe-Popup -->
        <div id="help-popup-<?= $this->id ?>" class="help-popup" onclick="toggleHelp(<?= $this->id ?>, false)">
            <div id="help-content-<?= $this->id ?>" class="help-content" onclick="event.stopPropagation()">
                <h3>Hilfe zu den Parametern</h3>
                <ul>
                    <li><b>A</b>: Halbachse A (dez.)</li>
                    <li><b>B</b>: Halbachse B (dez.)</li>
                    <li><b>Umdrehungen</b>: Anzahl der Umdrehungen</li>
                    <li><b>Schrittweite</b>: Abstand der Punkte</li>
                    <li><b>Reihenfolge</b>: Verbindungsreihenfolge</li>
                    <li><b>Linienst√§rke</b>: Dicke der Linien</li>
                    <li><b>Linienmodus</b>: Feste oder zyklische Farben</li>
                    <li><b>Farbe</b>: wird die Farbe als Text angebenen, so muss sie existierern<br>sonst erfolgt keine Anzeige</li>
                    <li><b>Farbe bei fest</b>: Linienfarbe (engl. oder #rrggbb)</li>
                    <li><b>Zyklische Farben</b>: Die Linien werden in der Reihenfolge verschiedenfarbig ausgegeben.</li>
                    <li><b>Debug</b>: Ellipse/Punkte anzeigen + Debug Info</li>

                </ul>
                <button onclick="toggleHelp(<?= $this->id ?>, false)">Schlie√üen</button>
            </div>
        </div>
    </dialog>

    <!-- Aktionsbuttons au√üerhalb des Dialogs -->
    <div class="ellipse-actions">
        <button type="button" onclick="submitEllipseForm(<?= $this->id ?>)">üîÑ Neu zeichnen</button>
        <button type="button" onclick="printSVG(<?= $this->id ?>)">üñ® SVG drucken</button>
        <button type="button" onclick="downloadSVG(<?= $this->id ?>)">üíæ SVG speichern</button>
    </div>

    <!-- SVG-Anzeige -->
    <div id="svg-container-<?= $this->id ?>">
        <svg id="ellipse-svg-<?= $this->id ?>" xmlns="http://www.w3.org/2000/svg" viewBox="<?= $this->viewBox ?>" preserveAspectRatio="xMidYMid meet">
            <defs>
                <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto" markerUnits="strokeWidth">
                    <polygon points="0 0, 10 3.5, 0 7" fill="black" />
                </marker>
            </defs>
        <?php 
            $lineWidth = $this->lineWidth;
            $n = count($this->points);
            foreach ($this->points as $i => $p) {
                $j = ($i + $this->R) % count($this->points);
                $x1 = $this->points[$i]['x'];
                $y1 = -$this->points[$i]['y'];
                $x2 = $this->points[$j]['x'];
                $y2 = -$this->points[$j]['y'];
                $color = ($this->lineMode === "cycle") ? $this->cycleColors[$i % count($this->cycleColors)] : $this->lineColor;
                if ($this->showCircle) {
                    echo "<line x1='$x1' y1='$y1' x2='$x2' y2='$y2' stroke='$color' stroke-width='$lineWidth' marker-end='url(#arrowhead)' />";
                } else {
                    echo "<line x1='$x1' y1='$y1' x2='$x2' y2='$y2' stroke='$color' stroke-width='$lineWidth' />";
                }
            }
            if ($this->showEllipse) {
                echo "<ellipse cx='0' cy='0' rx='".$this->A."' ry='".$this->B."' stroke='red' stroke-width='$lineWidth' fill='none' />";
            }
            if ($this->showCircle) {
                foreach ($this->points as $idx => $p) {
                    $x = $p['x']; $y = -$p['y'];
                    echo "<circle cx='$x' cy='$y' r='0.1' fill='none' stroke='black' stroke-width='$lineWidth'/>";
                    if ($n <= 200) {
                        echo "<text x='$x' y='$y' font-size='5' font-family='Arial, sans-serif' fill='black' >". $idx+1 ."</text>";
                    }
            }
        }

        ?>
        </svg>
    </div>
</div>

<style>
.ellipse-dialog {
  position: fixed;
  top: 30%;
  left: 7%;
  border-radius: 20px;
}
#help-popup-<?= $this->id ?> {
  position: fixed;
  top: 30%;
  left: 0;
  display: none;
  background: transparent;
  z-index: 9999;
  pointer-events: none;
}
#help-content-<?= $this->id ?> {
  background: #f5f5c0;
  border: 1px solid #999;
  padding: 20px;
  border-radius: 20px;
  pointer-events: auto;
}
.ellipse-actions {
  margin-top: 1em;
  display: flex;
  gap: 0.5em;
}
</style>

<script>
function submitEllipseForm(id) {
  const dlg = document.getElementById("ellipseDialog_" + id);
  const form = document.getElementById("ellipseForm_" + id);
  if (!form) return;
  if (!dlg.open) dlg.showModal();
  form.submit();
  dlg.close();
}
function printSVG(id) {
  const svg = document.getElementById("ellipse-svg-" + id).outerHTML;
  const win = window.open('', '', 'width=900,height=700');
  win.document.write('<html><head><title>Drucken</title></head><body onload="window.print();window.close()">' + svg + '</body></html>');
  win.document.close();
}
function downloadSVG(id) {
  const svg = document.getElementById("ellipse-svg-" + id).outerHTML;
  const blob = new Blob([svg], {type:"image/svg+xml;charset=utf-8"});
  const url = URL.createObjectURL(blob);
  const link = document.createElement("a");
  link.href = url;
  link.download = "ellipse-" + id + ".svg";
  link.click();
  URL.revokeObjectURL(url);
}
function toggleHelp(id, show) {
  document.getElementById("help-popup-" + id).style.display = show ? "flex" : "none";
}
function toggleCycleColors(id) {
  const mode = document.getElementById("lineMode_" + id).value;
  const fieldset = document.getElementById("cycleColors_" + id);
  fieldset.style.display = (mode === "cycle") ? "block" : "none";
}
document.addEventListener("DOMContentLoaded", () => {
  toggleCycleColors(<?= $this->id ?>);
});
// --- Dialogsteuerung ---
document.addEventListener("DOMContentLoaded", () => {
    const dlg = document.getElementById("ellipseDialog_<?= $this->id ?>");
    const active = <?= $this->templateSelectionActive ? 'true' : 'false' ?>;
    if (active && dlg && !dlg.open) {
        setTimeout(() => dlg.showModal(), 100);
    }
});

function keepDialogOpen(id) {
    // Flag in hidden field setzen, damit PHP wei√ü: Dialog aktiv
    const field = document.querySelector(`#ellipseDialog_${id} input[name='templateSelectionActive_${id}']`);
    if (field) field.value = "1";
}

function closeEllipseDialog(id) {
    const dlg = document.getElementById("ellipseDialog_" + id);
    if (!dlg) return;
    dlg.close();

    // Flag auf 0 setzen und neu laden, damit PHP den Dialog wieder zu l√§sst
    const url = new URL(window.location.href);
    url.searchParams.set("templateSelectionActive_" + id, "0");
    window.location.href = url.toString();
}


</script>
